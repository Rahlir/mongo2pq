#!/usr/bin/env python3


from argparse import Namespace, ArgumentParser
from os import environ
from pathlib import Path

from mongo2pq import PROJECT_NAME
from mongo2pq.main import main


def parse_args() -> Namespace | None:
    parser = ArgumentParser(
        prog=PROJECT_NAME,
        description="Command line utility to migrate MongoDB to Apache Parquet file"
    )
    parser.add_argument(
        '-u', '--uri',
        default=environ.get('MONGODB_URI'),
        help="URI for the MongoDB instance. Can also be set with env var MONGODB_URI"
    )
    parser.add_argument(
        '-o', '--outdir',
        default='./', type=Path,
        help="Destination for the output parquet files and schema files"
    )
    parser.add_argument(
        '-s', '--samples',
        type=int, default=20000,
        help="Number of samples to use when building schema"
    )
    parser.add_argument(
        '-d', '--db',
        help="Database to move to parquet. If not specified, the first database found is moved"
    )
    parser.add_argument(
        '-c', '--collections',
        nargs='*',
        help="Collections to move to parquet. Each will have its own output file. "
        "If not specified, the script will try to get all collections in the db (root permissions needed)"
    )
    parser.add_argument(
        '-p', '--partition',
        help="Partition key for partitioning output parquet file"
    )
    parser.add_argument(
        '-S', '--schemas',
        type=Path, nargs='*',
        help="YAML files defining schema for the collections. "
        "If not provided, schema will be inferred by sampling from the collection. "
        "The name without the extension is considered as name of the collection"
    )
    parser.add_argument(
        '-C', '--config',
        type=Path, default=environ.get('MONGO2PQ_CONFIG'),
        help="YAML config with schema overrides"
    )

    parsed = parser.parse_args()
    if not parsed.uri:
        print("ERROR: URI for MongoDB not passed. Use --uri option or MONGODB_URI env variable.")
        return None

    if parsed.schemas:
        checked_schemas = []
        for schema in parsed.schemas:
            if schema.is_file():
                checked_schemas.append(schema)
            else:
                print(f"WARNING: Schema '{schema!s}' doesn't exist. Schema will be inferred")
        parsed.schemas = checked_schemas

    if parsed.config:
        if not parsed.config.is_file():
            print(f"WARNING: Config '{parsed.config!s}' doesn't exist. No config will be used")
            parsed.config = None

    return parsed


if __name__ == "__main__":
    args = parse_args()
    if not args:
        exit(1)

    exit(
        main(args.uri, db=args.db, collections=args.collections,
             outdir=args.outdir, schema_paths=args.schemas, samples=args.samples,
             partition_key=args.partition, config_file=args.config)
    )
